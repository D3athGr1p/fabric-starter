/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.example.dns;


import com.owlike.genson.Genson;
import org.hyperledger.fabric.contract.Context;
import org.hyperledger.fabric.contract.ContractInterface;
import org.hyperledger.fabric.contract.ContractRouter;
import org.hyperledger.fabric.contract.annotation.*;
import org.hyperledger.fabric.shim.*;

import java.io.IOException;

@Contract(
        name = "DnsChaincode",
        info = @Info(
                title = "DnsChaincode contract",
                description = "The hyperlegendary car contract",
                version = "0.0.1-SNAPSHOT",
                license = @License(
                        name = "Apache 2.0 License",
                        url = "http://www.apache.org/licenses/LICENSE-2.0.html"),
                contact = @Contact(
                        email = "f.carr@example.com",
                        name = "F Carr",
                        url = "https://hyperledger.example.com"))
)

@Default
public final class DnsChaincode implements ContractInterface {

    private final Genson genson = new Genson();

    @Transaction(intent = Transaction.TYPE.SUBMIT)
    public Object put(final Context ctx, final String key, final Object value) {
        if (key == null || value == null) {
            throw new ChaincodeException("Key and Value should not be empty");
        }
        ChaincodeStub stub = ctx.getStub();
        stub.putStringState(key, genson.serialize(value));
        return genson.serialize(new Object());
    }


    @Transaction(intent = Transaction.TYPE.EVALUATE)
    public String get(final Context ctx) {
        return "test555";
    }

    public static void main(String[] args) throws Exception {
        ChaincodeServerProperties chaincodeServerProperties = new ChaincodeServerProperties();

        final String chaincodeServerPort = System.getenv("CHAINCODE_BIND_ADDRESS");
        if (chaincodeServerPort == null || chaincodeServerPort.isEmpty()) {
            ContractRouter.main(args);
            return;
//            throw new IOException("chaincode server port not defined in system env. for example 'CHAINCODE_BIND_ADDRESS=0.0.0.0:9999'");
        }

        final int port = Integer.parseInt(chaincodeServerPort.split(":")[1]);
        chaincodeServerProperties.setPortChaincodeServer(port);

        final String coreChaincodeIdName = System.getenv("PACKAGE_ID");
        if (coreChaincodeIdName == null || coreChaincodeIdName.isEmpty()) {
            throw new IOException("Chaincode package id is not defined in system env. for example 'PACKAGE_ID=externalcc:06d1d324e858751d6eb4211885e9fd9ff74b62cb4ffda2242277fac95d467033'");
        }

        boolean tlsEnabled = Boolean.parseBoolean(System.getenv("CORE_PEER_TLS_ENABLED"));
        if (tlsEnabled) {
            // String tlsClientRootCertPath = System.getenv(CORE_PEER_TLS_ROOTCERT_FILE);
            String tlsClientKeyFile = System.getenv("ENV_TLS_CLIENT_KEY_FILE");
            String tlsClientCertFile = System.getenv("ENV_TLS_CLIENT_CERT_FILE");

            // set values on the server properties
            chaincodeServerProperties.setTlsEnabled(true);
            chaincodeServerProperties.setKeyFile(tlsClientKeyFile);
            chaincodeServerProperties.setKeyCertChainFile(tlsClientCertFile);
        }

        ContractRouter contractRouter = new ContractRouter(new String[] {"-i", coreChaincodeIdName});
        ChaincodeServer chaincodeServer = new NettyChaincodeServer(contractRouter, chaincodeServerProperties);

        contractRouter.startRouterWithChaincodeServer(chaincodeServer);
    }

}
