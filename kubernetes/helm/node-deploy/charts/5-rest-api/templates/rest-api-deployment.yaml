apiVersion: apps/v1
kind: Deployment
metadata:
  name: rest-api-deployment
  labels:
    app: rest-api
    name: rest-api
spec:
  selector:
    matchLabels:
      app: rest-api
  replicas: 1 {{/* ${{REPLICAS}} */}}
  template:
    metadata:
      #          annotations:
      #            sidecar.istio.io/inject: "true"
      creationTimestamp: null
      labels:
        app: rest-api
    spec:
      volumes:
        - name: certs
          projected:
            sources:
              - secret:
                  name: certs-{{ .Values.org }}
                  items:
                    {{- include "certificates.decode" (merge (deepCopy .) .Values.orderer) | nindent 12 }}
                    {{- include "certificates.decode" (merge (deepCopy .) .Values.peer)    | nindent 12 }}

      containers:
        - name: rest
          ports:
            - name: rest-api-port
              containerPort: 3000
              protocol: TCP
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: File
          volumeMounts:
            - name: certs
              mountPath: /etc/hyperledger/crypto-config #/ordererOrganizations/${DOMAIN}

          image: >-
            {{ tpl .Values.images.fabric_starter_rest . }}
{{/*            ${IMAGE_PATH}@sha256:${IMAGE_TAG}*/}}

          {{/*          command: ["ls", "-l", "/etc/hyperledger/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com"]*/}}
          command: ["npm", "start"]

          envFrom:
            - configMapRef:
                name: common-{{ .Values.org }}
            - configMapRef:
                name: rest-cm

          {{- include "resources" (merge (deepCopy .) .Values.resources.rest) | nindent 4 }}


#          resources:
#            limits:
#              cpu: ${CPULIMIT}
#              memory: ${MEMORYLIMIT}
#            requests:
#              cpu: ${CPUREQUEST}
#              memory: ${MEMORYREQUEST}
          #              readinessProbe:
          #                httpGet:
          #                  path: /health/check
          #                  port: 8080
          #                initialDelaySeconds: 10
          #              livenessProbe:
          #                httpGet:
          #                  path: /health/check
          #                  port: 8080
          #                initialDelaySeconds: 10
